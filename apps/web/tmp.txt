// next-js opts
 
import { join } from 'node:path';
const __dirname = import.meta.dirname;
 output: 'standalone',
  experimental: {
    outputFileTracingRoot: join(__dirname, '../../'),
  },

// open-next

import type { OpenNextConfig } from 'open-next/types/open-next.d.ts';
 
const config = {
  default: {},
  buildCommand: 'exit 0', 
  buildOutputPath: '.',
  appPath: '.',
  packageJsonPath: '../../',  
  functions: {
    edge: {
      runtime: 'edge',
      patterns: ['opengraph/*'],
      routes: ['app/opengraph/[...path]/route'],
    },
  },
  /*
  middleware: {
    external: true,
  },*/
} satisfies OpenNextConfig;
 
export default config;

/*
  recommended way to install sharp
  "sharp-install": "npm install --arch=x64 --platform=linux --libc=glibc --prefix='.open-next/server-functions/default' sharp",
*/

/* how to fetch (locally) on the edge */


  /* res.json was,
   * too easy, I guess. Fetching
   * it this way, "just works".
   * */
  /*
  const allPosts = await fetch(
    new URL('../../../scripts/dist/contentlayermini/generated/Post/index.json', import.meta.url),
  )
    .then((res) => res.arrayBuffer())
    .then((arr) => new Blob([arr]))
    .then((blob) => blob.text())
    .then((text) => JSON.parse(text) as Post[]);

  const allPages = await fetch(
    new URL('../../../scripts/dist/contentlayermini/generated/Page/index.json', import.meta.url),
  )
    .then((res) => res.arrayBuffer())
    .then((arr) => new Blob([arr]))
    .then((blob) => blob.text())
    .then((text) => JSON.parse(text) as Page[]);

  const allCategories = await fetch(
    new URL('../../../scripts/dist/contentlayermini/generated/Category/index.json', import.meta.url),
  )
    .then((res) => res.arrayBuffer())
    .then((arr) => new Blob([arr]))
    .then((blob) => blob.text())
    .then((text) => JSON.parse(text) as Category[]);

  const allTags = await fetch(
    new URL('../../../scripts/dist/contentlayermini/generated/Tag/index.json', import.meta.url),
  )
    .then((res) => res.arrayBuffer())
    .then((arr) => new Blob([arr]))
    .then((blob) => blob.text())
    .then((text) => JSON.parse(text) as Tag[]);

  const allProjects = await fetch(
    new URL('../../../scripts/dist/contentlayermini/generated/Project/index.json', import.meta.url),
  )
    .then((res) => res.arrayBuffer())
    .then((arr) => new Blob([arr]))
    .then((blob) => blob.text())
    .then((text) => JSON.parse(text) as Project[]);
  */
