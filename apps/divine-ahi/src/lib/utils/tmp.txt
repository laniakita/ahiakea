  // check if postObj.meta.name == authors.name
  /*
  const sq1 = mdxlitedb
    .$with('sq1')
    .as(mdxlitedb.select({ name: authors.name }).from(authors).where(eq(authors.name, postObj.meta.author)));
  
    .with(sq1)
    .select({
      testId: posts.id,
      testName: sq1.name,
      testHeadline: posts.headline,
      testDate: posts.date,
    })
    .from(posts)
    .where(
      or(
        and(eq(posts.headline, postObj.meta.headline), eq(sq1.name, postObj.meta.author)),
        and(eq(posts.date, postObj.meta.date), eq(sq1.name, postObj.meta.author)),
      ),
    );
  */
 
  /*
  if (checkRes !== undefined) {
    console.log(checkRes)
    console.log('post file exists trying update');
    
    /*
    // @ts-expect-error -- types exist because how else could checkRes have a length > 0?
    const { testId, testHeadline, testDate, testAuthor } = checkRes[0];

    console.log(`exists with ${testId as string}`);
    console.log(`exists with ${testHeadline as string}`);
    console.log(`exists with ${testDate as string}`);

    await mdxlitedb
      .update(posts)
      .set({
        headline: postObj.meta.headline,
        subheadline: postObj.meta.subheadline,
        author: postObj.meta.author,
        category: postObj.meta.category,
        date: postObj.meta.date,
        heroFile: postObj.meta.heroFile,
        heroCredit: postObj.meta.heroCredit,
        heroCreditUrlText: postObj.meta.heroCreditUrlText,
        heroCreditUrl: postObj.meta.heroCreditUrl,
        heroAltText: postObj.meta.heroAltText,
        content: postObj.content,
      })
      .where(
        or(
          and(eq(posts.id, testId as number), eq(posts.author, testAuthor as string)),
          and(eq(posts.id, testId as number), eq(posts.date, testDate as string)),
        ),
      );
      */
  }
  /*
  // insert into db
  
  if (checkRes.length === 0) {
    console.log("post doesn't exist, inserting into posts table");
    
    await mdxlitedb
      .insert(posts)
      .values({
        author: postObj.meta.author, 
        headline: postObj.meta.headline,
        subheadline: postObj.meta.subheadline,
        date: postObj.meta.date,
        heroFile: postObj.meta.heroFile,
        heroCredit: postObj.meta.heroCredit,
        heroCreditUrlText: postObj.meta.heroCreditUrlText,
        heroCreditUrl: postObj.meta.heroCreditUrl,
        heroAltText: postObj.meta.heroAltText,
        content: postObj.content,
      })
      .onConflictDoNothing();
  }
  */
};

/*
    const authorQ = await mdxlitedb
      .select({ name: authors.name })
      .from(authors)
      .leftJoin(posts, eq(authors.name, postObj.meta.author));
    const categoryQ = await mdxlitedb
      .select({ title: categories.title })
      .from(categories)
      .leftJoin(posts, eq(categories.title, postObj.meta.category));
        author: sql`(select name from ${authors} where name=${postObj.meta.author})`,
        category: sql`(select title from ${categories} where title=${postObj.meta.category})`,
    */
